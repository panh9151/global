#!/usr/bin/env node
import s from"picocolors";import{Command as ne}from"commander";import re from"fs";import k from"path";import R from"prompts";var $={name:"create-agl-template",version:"1.0.0",description:"Create front end template with one command",type:"module",license:"ISC",author:"Dong Nguyen",bin:"./dist/index.js",files:["dist"],scripts:{dev:"tsup --watch",build:"tsup",typecheck:"tsc --noEmit",clean:"rimraf dist","clean:app":"rimraf my-app",start:"node dist/index.js","start:app":"rimraf my-app && node dist/index.js my-app","install:global":"npm install && npm run build && npm install -g"},repository:{type:"git",url:"https://github.com/allgrow-labo/create-agl-template"},devDependencies:{"@types/node":"^20.2.5","@types/prompts":"^2.4.7","@types/validate-npm-package-name":"^4.0.1",rimraf:"^5.0.1",tsup:"^6.7.0",typescript:"^5.1.3"},dependencies:{commander:"^10.0.1","cross-env":"^7.0.3",execa:"^7.1.1","fast-glob":"^3.3.1",ora:"^7.0.1",picocolors:"^1.0.0",prompts:"^2.4.2","validate-npm-package-name":"^5.0.0"}};import F from"path";import v from"picocolors";import V from"fast-glob";import _ from"picocolors";import{execSync as f}from"child_process";import d from"fs";import p from"path";import q from"validate-npm-package-name";import{execa as T}from"execa";import{fileURLToPath as H}from"url";var Q=p.dirname(H(import.meta.url)),w=p.join(Q,"..");async function D(e){try{return await d.promises.access(e,(d.constants||d).W_OK),!0}catch{return!1}}function G(e,t={recursive:!0}){return d.promises.mkdir(e,t)}var M=async(e,t,{cwd:o,rename:n=i=>i,parents:r=!0}={})=>{let i=typeof e=="string"?[e]:e;if(i.length===0||!t)throw new TypeError("`src` and `dest` are required");let a=(o?d.readFileSync(p.join(o,".gitignore"),"utf-8"):"").split(`
`),m=await V.async(i,{cwd:o,dot:!0,absolute:!1,stats:!1,ignore:a}),u=o?p.resolve(o,t):t;return Promise.all(m.map(async b=>{let I=p.dirname(b),c=n(p.basename(b)),g=o?p.resolve(o,b):b,h=r?p.join(u,I,c):p.join(u,c);return await d.promises.mkdir(p.dirname(h),{recursive:!0}),d.promises.copyFile(g,h)}))};function j(e,t){let o=[".DS_Store",".git",".gitattributes",".gitignore",".gitlab-ci.yml",".hg",".hgcheck",".hgignore",".idea",".npmignore",".travis.yml","LICENSE","Thumbs.db","docs","mkdocs.yml","npm-debug.log","yarn-debug.log","yarn-error.log","yarnrc.yml",".yarn"],n=d.readdirSync(e).filter(r=>!o.includes(r)).filter(r=>!/\.iml$/.test(r));if(n.length>0){console.log(`The directory ${_.green(t)} contains files that could conflict:`),console.log();for(let r of n)try{d.lstatSync(p.join(e,r)).isDirectory()?console.log(`  ${_.blue(r)}/`):console.log(`  ${r}`)}catch{console.log(`  ${r}`)}return console.log(),console.log("Either try using a new directory name, or remove the files listed above."),console.log(),!1}return!0}function L(){let e=process.env.npm_config_user_agent;return e?e.startsWith("yarn")?"yarn":e.startsWith("pnpm")?"pnpm":"npm":"npm"}function C(e){try{return f("git rev-parse --is-inside-work-tree",{stdio:"ignore",cwd:e}),!0}catch{}return!1}function X(){try{return f("hg --cwd . root",{stdio:"ignore"}),!0}catch{}return!1}function Z(){try{return f("git config init.defaultBranch",{stdio:"ignore"}),!0}catch{}return!1}async function U(){try{let e=w,{stdout:t}=await T("git",["rev-parse","@"],{cwd:e}),{stdout:o}=await T("git",["rev-parse","@{u}"],{cwd:e}),{stdout:n}=await T("git",["merge-base","@","@{u}"],{cwd:e});return t===o?"up-to-date":t===n?"need-to-pull":o===n?"need-to-push":"diverged"}catch{return"error"}}function O(e){let t=!1;try{return f("git --version",{stdio:"ignore"}),C()||X()?!1:(f("git init",{stdio:"ignore"}),t=!0,Z()||f("git checkout -b main",{stdio:"ignore"}),f("git add -A",{stdio:"ignore"}),f('git commit -m "Initial commit from Create AGL Template"',{stdio:"ignore"}),!0)}catch{if(t)try{d.rmSync(p.join(e,".git"),{recursive:!0,force:!0})}catch{}return!1}}function A(e){let t=q(e);return t.validForNewPackages?{valid:!0}:{valid:!1,problems:[...t.errors||[],...t.warnings||[]]}}import E from"node:fs";import ee from"os";import N from"picocolors";import x from"path";import{fileURLToPath as te}from"url";import{execa as oe}from"execa";async function W({appName:e,root:t,packageManager:o,template:n}){console.log(N.bold(`Using ${o}.`)),console.log(`
Initializing project with template:`,n);let r=x.join(te(import.meta.url),"../..","template",n);await M(["**","!package.json","!package-lock.json","!README.md"],t,{parents:!0,cwd:r});let l=JSON.parse(E.readFileSync(x.join(r,"package.json"),"utf-8"));l.name=e,E.writeFileSync(x.join(t,"package.json"),JSON.stringify(l,null,2)+ee.EOL);let a=E.readFileSync(x.join(r,"README.md"),"utf-8");if(a=a.replaceAll("[PACKAGE_MANAGER]",o).replaceAll("[RUN]",o==="yarn"?"":"run "),E.writeFileSync(x.join(t,"README.md"),a),l.dependencies){console.log(`
Installing dependencies:`);for(let m in l.dependencies)console.log(`- ${N.cyan(m)}`)}if(l.devDependencies){console.log(`
Installing devDependencies:`);for(let m in l.devDependencies)console.log(`- ${N.cyan(m)}`)}console.log(),await oe(o,["install"],{stdio:"inherit"})}async function B({root:e,packageManager:t,template:o}){let n=F.basename(e);await D(F.dirname(e))||(console.error("The application path is not writable, please check folder permissions and try again."),console.error("It is likely you do not have write permissions for this folder."),process.exit(1)),await G(e),j(e,n)||process.exit(1);let r=process.cwd(),i=t==="yarn";console.log(`Creating a new template in ${v.green(e)}.`),console.log(),process.chdir(e);try{await W({appName:n,root:e,template:o,packageManager:t}),O(e)&&console.log("Initialized a git repository."),console.log(),console.log(`${v.green("Success!")} Created ${n} at ${e}`);let a;F.join(r,n)===e?a=n:a=e,console.log("Inside that directory, you can run several commands:"),console.log(),console.log(v.cyan(`  ${t} ${i?"":"run "}dev`)),console.log("    Starts the development server."),console.log(),console.log(v.cyan(`  ${t} ${i?"":"run "}build`)),console.log("    Builds the app for production."),console.log(),console.log(v.cyan(`  ${t} ${i?"":"run "}preview`)),console.log("    Runs the built app in preview mode."),console.log(),console.log("We suggest that you begin by typing:"),console.log(),console.log(v.cyan("  cd"),a),console.log(`  ${v.cyan(`${t} ${i?"":"run "}dev`)}`),console.log()}catch(a){let m=function(u){return typeof u=="object"&&u!==null&&typeof u.message=="string"};var l=m;throw new Error(m(a)?a.message:a+"")}}import{execa as S}from"execa";import J from"ora";var y="",Y=()=>process.exit(0);process.on("SIGINT",Y);process.on("SIGTERM",Y);var z=e=>{e.aborted&&(process.stdout.write("\x1B[?25h"),process.stdout.write(`
`),process.exit(1))},P=new ne().name($.name).description($.description).version($.version||"1.0.0","-v, --version","display the version number").arguments("[project-directory]").usage(`${s.green("[project-directory]")} [options]`).action(e=>{y=e}).option("-t, --template <template>","select template").option("--use-npm",`

  Explicitly tell the CLI to bootstrap the application using npm
`).option("--use-pnpm",`

  Explicitly tell the CLI to bootstrap the application using pnpm
`).option("--use-yarn",`

  Explicitly tell the CLI to bootstrap the application using Yarn
`).parse(process.argv);async function ie(){let e=process.argv.slice(2);try{await S("create-agl-template",e,{stdin:"inherit",stdout:"inherit"}),process.exit()}catch(t){t.exitCode===1?process.exit(1):(J().fail("Re-running script failed!"),console.log(),console.log(t.message),console.log())}}async function se(){if(await U()!=="need-to-pull")return;console.log(s.yellow("A new version of `create-agl-template` is available!"));let t=w;try{console.log(),console.log(s.yellow("Full Changelog:")),await S("git",["log","..@{u}","--oneline"],{stdio:"inherit",cwd:t}),console.log()}catch{}if(!(await R({onState:z,type:"confirm",name:"update",message:"Update new version and continue?"})).update)return;let n=J("Updating new version").start();try{await S("git",["pull"],{cwd:t}),await S("npm",["run","install:global"],{cwd:t}),n.succeed("Update successful"),await ie()}catch(r){n.fail("Update failed!"),console.log(),console.log(r.message),console.log()}}async function ae(){if(C(w)&&(await se(),S("git",["fetch"],{cwd:w})),typeof y=="string"&&(y=y.trim()),!y){let c=await R({onState:z,type:"text",name:"path",message:"What is your project named?",initial:"my-app",validate:g=>{let h=A(k.basename(k.resolve(g)));return h.valid?!0:"Invalid project name: "+h.problems[0]}});typeof c.path=="string"&&(y=c.path.trim())}y||(console.log(`
Please specify the project directory:
  ${s.cyan(P.name())} ${s.green("<project-directory>")}
For example:
  ${s.cyan(P.name())} ${s.green("my-next-app")}

Run ${s.cyan(`${P.name()} --help`)} to see all options.`),process.exit(1));let e=k.resolve(y),t=k.basename(e),{valid:o,problems:n}=A(t);o||(console.error(`Could not create a project called ${s.red(`"${t}"`)} because of npm naming restrictions:`),n.forEach(c=>console.error(`    ${s.red(s.bold("*"))} ${c}`)),process.exit(1)),re.existsSync(e)&&!j(e,t)&&process.exit(1);let i=P.opts(),l=i.template||i.t,a=[{name:"ejs",display:"EJS",color:s.magenta},{name:"twig",display:"Twig",color:s.green},{name:"default",display:"Default",color:s.gray}],m;try{let c=a.find(g=>g.name===l);m=await R([{type:l&&c?null:"select",name:"template",message:typeof l=="string"&&!c?s.reset(`"${l}" isn't a valid template. Please choose from below: `):s.reset("Select a template:"),initial:0,choices:a.map(g=>{let h=g.color;return{title:h(g.display||g.name),value:g}})}],{onCancel:()=>{throw new Error(s.red("\u2716")+" Operation cancelled")}})}catch(c){console.log(c.message);return}let{template:u}=m,b=u?.name||l,I=i.useNpm?"npm":i.usePnpm?"pnpm":i.useYarn?"yarn":L();B({root:e,packageManager:I,template:b})}ae();
//# sourceMappingURL=index.js.map